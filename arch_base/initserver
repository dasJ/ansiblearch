#!/usr/bin/bash
# This script prepares an Arch Linux for ansible.
# It is supposed to be run from the archiso and sets up an entire basic system.
# See Readme.md for more information.

set -e

# All configuration variables with my default values.
# You may need to override them.
disk="${DISK:=vda}" # Installation root
country="${COUNTRY:=Germany}" # For pacman mirrors
ssh_pubkey="${SSH_PUBKEY:=ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAIFCX9/rkqnviowqMGLesxO/822cBLeunk508ZaxyE/tB janne@acerola}" # SSH key for ansible login

# Partition table
# We create a swap that matches the RAM size
echo "o
y

n


-`grep MemTotal /proc/meminfo | awk '{ print $2 }'`K


n



8200
r
g
w
y
" | gdisk /dev/$disk
# I'm using gdisk because it can use negative values for the last sector.
# The r-g-w-y thing converts the GPT to an MBR.
partprobe

# Partitions
mkfs.ext4 -FL root /dev/${disk}1
mkswap -L swap0 /dev/${disk}2

# Mount
mount /dev/${disk}1 /mnt
swapon /dev/${disk}2

# Init pacman
pacman -Sy --noconfirm reflector
reflector --verbose --country "$country" --fastest 20 --latest 50 --save /etc/pacman.d/mirrorlist

# Create new root
pacstrap /mnt base base-devel syslinux openssh python2
genfstab -U /mnt > /mnt/etc/fstab

# Enable units
ln -sv /usr/lib/systemd/system/sshd.service /mnt/etc/systemd/system/multi-user.target.wants/
ln -sv /usr/lib/systemd/system/netctl.service /mnt/etc/systemd/system/multi-user.target.wants/

# Create a DHCP config for every interface
for intpath in `find /sys/class/net ! -name lo -type l`; do
	int=`basename "$intpath"`
	echo "Description='Connection $int'
Connection=ethernet
Interface=$int
IP=dhcp" > /mnt/etc/netctl/$int
	ln -sv /usr/lib/systemd/system/netctl@.service /mnt/etc/systemd/system/multi-user.target.wants/netctl@$int.service
done

# SSH public key
mkdir -pv /mnt/root/.ssh
echo "$ssh_pubkey" > /mnt/root/.ssh/authorized_keys

# Prevent SSH from creating insecure keys
echo "[Unit]
Description=SSH Key Generation
ConditionPathExists=|!/etc/ssh/ssh_host_rsa_key
ConditionPathExists=|!/etc/ssh/ssh_host_rsa_key.pub
ConditionPathExists=|!/etc/ssh/ssh_host_ed25519_key
ConditionPathExists=|!/etc/ssh/ssh_host_ed25519_key.pub

[Service]
Type=oneshot
RemainAfterExit=yes
ExecStart=/usr/bin/ssh-keygen -N '' -t ed25519 -f /etc/ssh/ssh_host_ed25519_key
ExecStart=/usr/bin/ssh-keygen -N '' -t rsa -b 4096 -f /etc/ssh/ssh_host_rsa_key" > /mnt/etc/systemd/system/sshdgenkeys.service

# Create keys now (we'll need their fingerprints later)
ssh-keygen -N '' -t ed25519 -f /mnt/etc/ssh/ssh_host_ed25519_key
ssh-keygen -N '' -t rsa -f /mnt/etc/ssh/ssh_host_rsa_key

# Generate secure moduli
ssh-keygen -G /mnt/etc/ssh/moduli.all -b 4096
ssh-keygen -T /mnt/etc/ssh/moduli.safe -f /mnt/etc/ssh/moduli.all
mv /mnt/etc/ssh/moduli.safe /mnt/etc/ssh/moduli
rm /mnt/etc/ssh/moduli.all

# Create secure SSH config (secure secure shell)
echo "#	$OpenBSD: sshd_config,v 1.94 2015/02/02 01:57:44 deraadt Exp $

# This is the sshd server system-wide configuration file.  See
# sshd_config(5) for more information.

# This sshd was compiled with PATH=/usr/bin:/bin:/usr/sbin:/sbin

# The strategy used for options in the default sshd_config shipped with
# OpenSSH is to specify options with their default value where
# possible, but leave them commented.  Uncommented options override the
# default value.

Port 22
Port 81
#AddressFamily any
#ListenAddress 0.0.0.0
#ListenAddress ::

# The default requires explicit activation of protocol 1
Protocol 2

# HostKey for protocol version 1
#HostKey /etc/ssh/ssh_host_key
# HostKeys for protocol version 2
HostKey /etc/ssh/ssh_host_rsa_key
#HostKey /etc/ssh/ssh_host_dsa_key
#HostKey /etc/ssh/ssh_host_ecdsa_key
HostKey /etc/ssh/ssh_host_ed25519_key

# Lifetime and size of ephemeral version 1 server key
#KeyRegenerationInterval 1h
#ServerKeyBits 1024

# Ciphers and keying
#RekeyLimit default none

# Logging
# obsoletes QuietMode and FascistLogging
#SyslogFacility AUTH
#LogLevel INFO

# Authentication:

#LoginGraceTime 2m
#PermitRootLogin no
#StrictModes yes

#MaxAuthTries 6
#MaxSessions 10

#RSAAuthentication yes
#PubkeyAuthentication yes

# The default is to check both .ssh/authorized_keys and .ssh/authorized_keys2
# but this is overridden so installations will only check .ssh/authorized_keys
AuthorizedKeysFile	.ssh/authorized_keys

KexAlgorithms curve25519-sha256@libssh.org,diffie-hellman-group-exchange-sha256
Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr
MACs hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,hmac-ripemd160-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,hmac-ripemd160,umac-128@openssh.com

#AuthorizedPrincipalsFile none

#AuthorizedKeysCommand none
#AuthorizedKeysCommandUser nobody

# For this to work you will also need host keys in /etc/ssh/ssh_known_hosts
#RhostsRSAAuthentication no
# similar for protocol version 2
#HostbasedAuthentication no
# Change to yes if you don't trust ~/.ssh/known_hosts for
# RhostsRSAAuthentication and HostbasedAuthentication
#IgnoreUserKnownHosts no
# Don't read the user's ~/.rhosts and ~/.shosts files
#IgnoreRhosts yes

# To disable tunneled clear text passwords, change to no here!
PasswordAuthentication no
#PermitEmptyPasswords no

# Change to no to disable s/key passwords
ChallengeResponseAuthentication no

#AllowGroups ssh-users

# Kerberos options
#KerberosAuthentication no
#KerberosOrLocalPasswd yes
#KerberosTicketCleanup yes
#KerberosGetAFSToken no

# GSSAPI options
#GSSAPIAuthentication no
#GSSAPICleanupCredentials yes

# Set this to 'yes' to enable PAM authentication, account processing,
# and session processing. If this is enabled, PAM authentication will
# be allowed through the ChallengeResponseAuthentication and
# PasswordAuthentication.  Depending on your PAM configuration,
# PAM authentication via ChallengeResponseAuthentication may bypass
# the setting of "PermitRootLogin without-password".
# If you just want the PAM account and session checks to run without
# PAM authentication, then enable this but set PasswordAuthentication
# and ChallengeResponseAuthentication to 'no'.
UsePAM yes

#AllowAgentForwarding yes
#AllowTcpForwarding yes
#GatewayPorts no
#X11Forwarding no
#X11DisplayOffset 10
#X11UseLocalhost yes
#PermitTTY yes
PrintMotd no # pam does that
#PrintLastLog yes
#TCPKeepAlive yes
#UseLogin no
UsePrivilegeSeparation sandbox		# Default for new installations.
#PermitUserEnvironment no
#Compression delayed
ClientAliveInterval 120
ClientAliveCountMax 3
#UseDNS no
#PidFile /run/sshd.pid
#MaxStartups 10:30:100
#PermitTunnel no
#ChrootDirectory none
#VersionAddendum none

# no default banner path
#Banner none

# override default of no subsystems
Subsystem	sftp	/usr/lib/ssh/sftp-server

# Example of overriding settings on a per-user basis
#Match User anoncvs
#	X11Forwarding no
#	AllowTcpForwarding no
#	PermitTTY no
#	ForceCommand cvs server
" > /mnt/etc/ssh/sshd_config

# SSH fingerprints in issue
ssh-keygen -lf /mnt/etc/ssh/ssh_host_rsa_key.pub >> /mnt/etc/issue
ssh-keygen -lf /mnt/etc/ssh/ssh_host_ed25519_key.pub >> /mnt/etc/issue
echo -e "\n" >> /mnt/etc/issue

# syslinux
arch-chroot /mnt /usr/bin/syslinux-install_update -i -a -m
sed -i "s/sda3/${disk}1/g" /mnt/boot/syslinux/syslinux.cfg
sed -i "s/TIMEOUT 50/TIMEOUT 20/g" /mnt/boot/syslinux/syslinux.cfg

# Clean up
umount /mnt
swapoff -a
sync

# Good luck
reboot
